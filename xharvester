#!/bin/env python3
import subprocess
import os
import argparse
import time
import socket
import sys
import platform
import requests
import zipfile
import tempfile
import shutil

### Fixed Color Setup ###
# Use proper ANSI escape sequences for all systems
GREEN = '\033[32m'
YELLOW = '\033[33m'
RED = '\033[31m'
BLUE = '\033[34m'
MAGENTA = '\033[35m'
CYAN = '\033[36m'
LIGHTCYAN_EX = '\033[96m'
RESET = '\033[0m'

### Color Status ###
def print_status(message: str) -> None:
    """Print status messages"""
    print(f"{GREEN}[+]{RESET} {message}")

def print_warning(message: str) -> None:
    """Print warning messages"""
    print(f"{YELLOW}[!]{RESET} {message}")

def print_error(message: str) -> None:
    """Print error messages"""
    print(f"{RED}[-]{RESET} {message}")

### Banner Function ###
def banner() -> None:
    """Banner"""
    os.system('cls' if os.name == 'nt' else 'clear')
    banner_text = f"""{MAGENTA}
 _  _  _   _    __    ____  _  _  ____  ___  ____  _____  ____ {RED}
( \/ )( )_( )  /__\  (  _ \( \/ )( ___)/ __)(_  _)(  _  )(  _ \\{MAGENTA}
 )  (  ) _ (  /(__)\  )   / \  /  )__) \__ \  )(   )(_)(  )   /{RED}
(_/\_)(_) (_)(__)(__)(_)\_)  \/  (____)(___/ (__) (_____)(_)\_)
    {RESET}"""
    print(banner_text)

### Text Animation ###
def text_animation():
    banner_text = f"""{MAGENTA}
 _  _  _   _    __    ____  _  _  ____  ___  ____  _____  ____ {RED}
( \/ )( )_( )  /__\  (  _ \( \/ )( ___)/ __)(_  _)(  _  )(  _ \\{MAGENTA}
 )  (  ) _ (  /(__)\  )   / \  /  )__) \__ \  )(   )(_)(  )   /{RED}
(_/\_)(_) (_)(__)(__)(_)\_)  \/  (____)(___/ (__) (_____)(_)\_)
    {RESET}"""
    for char in banner_text:
        print(char, end='', flush=True)
        time.sleep(0.005)
    print(f"\n{CYAN}>>> Extended Reconnaissance Toolkit For Pentesters <<<{RESET}")
    print(f"{GREEN}| GitHub:{RESET}{YELLOW} @n3tworkh4x |{RESET}")
    print(f"{RED}Use only for authorized security testing!{RESET}")

### Display Menu ###
def show_menu() -> None:
    text_animation()
    print(f"\n\t\t\t(▀̿Ĺ̯▀̿ ̿)\t\t\t\n")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{GREEN}         🚀   XHARVESTOR -- MAIN MENU")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{CYAN}\t[1] 🔀 BlueTooth")
    print(f"{CYAN}\t[2] 📶 Wifi")
    print(f"{CYAN}\t[3] 🚖 Automobile")
    print(f"{CYAN}\t[4] 📡 Radio Frequency")
    print(f"{CYAN}\t[5] 🏙️  Industrial Control System - SCADA")
    print(f"{CYAN}\t[6] 🤘 About")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{RED}\t [0] ❌ Exit")
    print(f"{YELLOW}\t[99] 🎁 Update XHARVESTOR")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")  

### Display About ###
def about() -> None:
    description = f"""
{RED}\t\t\t━━━━━━━━━━\t\t\t
{YELLOW}Bio: {RESET}{GREEN}I am a 19-year-old skilled hacker and programmer with expertise in ICS/SCADA security,
{GREEN}Wireless exploitation (Wi-Fi/Bluetooth/RF) & Automotive systems hacking.
{RED}\t\t\t━━━━━━━━━━\t\t\t
{YELLOW} About: {RESET}{CYAN}xharvestor is a specialized,{RESET}
{CYAN}modular Python-based reconnaissance suite designed for security assessments of radio frequency (RF),{RESET}
{CYAN}wireless (bluetooth & wifi),{RESET}
{CYAN}industrial control system (SCADA),{RESET}
{CYAN}and automotive systems.{RESET}
{CYAN}It integrates multiple tools and scripts into a unified workflow for probing,{RESET}
{CYAN}analyzing, and documenting findings from the physical and wireless world.{RESET}
"""
    print(description)

### Improved Update Function ###
def update_xharvestor() -> None:
    """Update XHARVESTOR from GitHub repository"""
    print_status(f"{YELLOW}Checking for updates...")
    
    # Use HTTPS instead of SSH to avoid authentication issues
    REPO_URL = "https://github.com/n3tworkh4x/xharvestor.git"
    DIR = "xharvestor"
    BRANCH = "main"
    
    try:
        # Check if we're on Windows or Linux
        if platform.system() == "Windows":
            print_warning("Windows detected - using alternative update method")
            
            # Download the latest version as zip
            print_status("Downloading latest version...")
            zip_url = "https://github.com/n3tworkh4x/xharvestor/archive/refs/heads/main.zip"
            temp_dir = tempfile.mkdtemp()
            zip_path = os.path.join(temp_dir, "xharvestor.zip")
            
            # Download the zip file
            response = requests.get(zip_url)
            with open(zip_path, 'wb') as f:
                f.write(response.content)
            
            # Extract the zip file
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)
            
            # Copy files to current directory (excluding .git directory if exists)
            source_dir = os.path.join(temp_dir, "xharvestor-main")
            for item in os.listdir(source_dir):
                if item != '.git':  # Don't overwrite .git directory if it exists
                    s = os.path.join(source_dir, item)
                    d = os.path.join(os.getcwd(), item)
                    if os.path.isdir(s):
                        if os.path.exists(d):
                            shutil.rmtree(d)
                        shutil.copytree(s, d)
                    else:
                        shutil.copy2(s, d)
            
            # Clean up
            shutil.rmtree(temp_dir)
            print_status(f"{YELLOW}Update completed successfully!")
            
        else:
            # Linux/Mac - use git commands with HTTPS
            print_status(f"{YELLOW}Unix-like system detected - using git for update")
            
            if os.path.isdir(os.path.join(os.getcwd(), '.git')):
                # If we're in a git repository, change to HTTPS and pull
                subprocess.run(['git', 'remote', 'set-url', 'origin', REPO_URL], 
                              capture_output=True, text=True)
                result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
                if result.returncode == 0:
                    print_status(f"{YELLOW}Update completed successfully!")
                    print(result.stdout)
                else:
                    print_error(f"{RED}Update failed!")
                    print_error(RED, result.stderr)
            else:
                # Clone the repository if it doesn't exist
                print_status("Cloning repository...")
                result = subprocess.run(['git', 'clone', REPO_URL], capture_output=True, text=True)
                if result.returncode == 0:
                    print_status("Clone completed successfully!")
                else:
                    print_error(f"{RED}Clone failed!")
                    print_error(result.stderr)
                    
    except Exception as e:
        print_error(f"{RED}Update process failed: {str(e)}")
        print_warning("Please update manually from https://github.com/n3tworkh4x/xharvestor")

### Main Program ###
def main():
    # ========== MAIN LOOP ========== #
    active = True
    while active:
        os.system('cls' if os.name == 'nt' else 'clear')
        show_menu()
        choice = input(f"\n{GREEN}root@{socket.gethostname()}:~$ {RESET}")
        if choice == "0":
            skull = f"{MAGENTA}[💀]{RESET}"
            closing_text = f"{RED}Closing The Program...{RESET}"
            print('okay')
            print('okay')
            time.sleep(0.10)
            
            print(f"\n{skull} {closing_text}\n")
            active = False
            
        elif choice == "1":
            print(f"\n--- BlueTooth ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')
            
        elif choice == "2":
            print(f"\n--- WiFi ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')

        elif choice == "3":
            print(f"\n--- Automobile ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')

        elif choice == '4':
            print(f"\n--- Radio Frequency ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')

        elif choice == '5':
            print(f"\n--- Industrial Control System - SCADA ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')

        elif choice == '6':
            time_choice = input(f'{GREEN}[?] Choose time stamps [Read Bio & About][default = 10]>>> {RESET}')
            if not time_choice:
                about()
                time.sleep(10)
                os.system('cls' if os.name == 'nt' else 'clear')
            else:
                try:
                    about()
                    time.sleep(int(time_choice))
                    os.system('cls' if os.name == 'nt' else 'clear')
                except ValueError:
                    print_error("Invalid input. Using default time of 10 seconds.")
                    time.sleep(10)
                    os.system('cls' if os.name == 'nt' else 'clear')

        elif choice == '99':
            os.system('cls' if os.name == 'nt' else 'clear')
            update_xharvestor()
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')

        else:
            warning = f"\n\t{choice} is not in the menu!\n"
            for word in warning:
                print(word, end='', flush=True)
                time.sleep(0.15) 
                os.system('cls' if os.name == 'nt' else 'clear')   

if __name__ == '__main__':
    if os.name != 'nt' and os.geteuid() != 0:
        warning = "[!] Please run xharvestor as root\n"
        for word in warning:
            print(word, end='', flush=True)
            time.sleep(0.05)
        sys.exit(1)
    else:
        main()