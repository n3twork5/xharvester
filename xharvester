#!/usr/bin/env python3
"""
xharvester - Extended Reconnaissance & Exploitation Toolkit
Main application entry point with improved error handling and structure

Author: Network(GHANA)
Version: 2.0
"""

import sys
import time
from typing import NoReturn

from config import Config, Colors, MenuConfig
from utils import (
    Animation, SystemUtils, MenuRenderer, Logger, error_handler,
    InputValidator, create_about_text
)
from modules.automobile_module import AutomobileModule


class XHarvesterApp:
    """Main application class for xharvester"""
    
    def __init__(self):
        self.logger = Logger.get_logger("xharvester")
        self.hostname = SystemUtils.get_hostname()
        self.logger.info(f"Starting {Config.APP_NAME} v{Config.VERSION}")
    
    def show_main_menu(self) -> None:
        """Display the main application menu"""
        Animation.display_banner()
        MenuRenderer.render_menu_header(f"XHARVESTER {Colors.YELLOW}-{Colors.CYAN} MAIN MENU")
        
        # Define icons for menu options
        icons = {
            "1": "ᛒ",
            "2": "🛜", 
            "3": "🚖",
            "4": "📡",
            "5": "🏗️",
            "6": "🛈"
        }
        
        MenuRenderer.render_menu_options(MenuConfig.MAIN_MENU_OPTIONS, icons)
        MenuRenderer.render_menu_footer()

    
    def show_about_info(self) -> None:
        """Display about information with user-configurable timeout"""
        with error_handler("displaying about information", self.logger):
            print(create_about_text())
            
            try:
                time_input = input(f'{Colors.CYAN}  [{Colors.GREEN}❔{Colors.CYAN}]{Colors.GREEN} Choose the timestamp [{Colors.CYAN}Read Bio{Colors.GREEN} & {Colors.CYAN}About{Colors.GREEN}][{Colors.RED}default {Colors.GREEN}={Colors.YELLOW} 10{Colors.GREEN}]>>> {Colors.YELLOW}')
                
                if time_input:
                    timeout = InputValidator.validate_integer(time_input, 1, 60)
                else:
                    timeout = 10
                    
                Animation.show_loading("Reading information", timeout)
                
            except ValueError as e:
                Animation.typewriter_line(f"{Colors.ERROR}Invalid input: {e}. Using default time of 10 seconds.{Colors.RESET}")
                time.sleep(10)
    
    def handle_not_implemented(self, feature: str) -> None:
        """Handle not yet implemented features"""
        message = f"\t\t\t{Colors.ERROR}{feature} not implemented yet!\a"
        Animation.typewriter_line(message)
        self.logger.info(f"User accessed unimplemented feature: {feature}")
    
    def run(self) -> NoReturn:
        """Main application loop"""
        # Ensure root privileges
        SystemUtils.ensure_root()
        
        while True:
            try:
                SystemUtils.clear_screen()
                self.show_main_menu()
                choice = MenuRenderer.get_user_input(self.hostname)
                
                # Handle user choice
                if choice == "0":
                    self._handle_exit()
                elif choice == "1":
                    self.handle_not_implemented("BlueTooth module")
                elif choice == "2":
                    self.handle_not_implemented("WiFi module")
                elif choice == "3":
                    self._handle_automobile_module()
                elif choice == "4":
                    self.handle_not_implemented("Radio Frequency module")
                elif choice == "5":
                    self.handle_not_implemented("SCADA module")
                elif choice == "6":
                    self.show_about_info()
                elif choice == "99":
                    self.handle_not_implemented("Update functionality")
                else:
                    self._handle_invalid_choice(choice)
                    
                # Pause before returning to menu (except for exit)
                if choice != "0":
                    input(f"\n  {Colors.GREEN}Press Enter to continue...{Colors.RESET}")
                    
            except (KeyboardInterrupt, EOFError):
                self._handle_exit()
    
    def _handle_exit(self) -> NoReturn:
        """Handle application exit"""
        message = f"\n\t\t\t{Colors.CYAN} [{Colors.MAGENTA}💀{Colors.CYAN}]{Colors.RED} Closing The Program...\t\t\t"
        Animation.typewriter_line(message)
        self.logger.info("Application closed by user")
        SystemUtils.safe_exit()
    
    def _handle_automobile_module(self) -> None:
        """Handle automobile module execution"""
        with error_handler("launching automobile module", self.logger):
            auto_module = AutomobileModule()
            auto_module.main()
    
    def _handle_invalid_choice(self, choice: str) -> None:
        """Handle invalid menu choices"""
        message = f"\n\t\t\t{Colors.WARNING}'{choice}' is not a valid menu option!{Colors.RESET}"
        Animation.typewriter_line(message)
        self.logger.warning(f"Invalid menu choice: {choice}")
        time.sleep(2)


def main() -> NoReturn:
    """Application entry point"""
    try:
        app = XHarvesterApp()
        app.run()
    except Exception as e:
        # Last resort error handling
        print(f"{Colors.ERROR}Critical error: {e}{Colors.RESET}")
        sys.exit(1)


if __name__ == '__main__':
    main()
