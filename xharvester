#!/usr/bin/env python3
import os
import time
import socket
import sys
from datetime import datetime
from pathlib import Path
from modules.automobile_module import AutomobileModule

# Color codes
WHITE = '\033[37m'
GREEN = '\033[32m'
YELLOW = '\033[33m'
RED = '\033[31m'
BLUE = '\033[34m'
MAGENTA = '\033[35m'
CYAN = '\033[36m'
LIGHTCYAN_EX = '\033[96m'
BLACK = '\x1b[30m'
RESET = '\033[0m'

# Speed Configuraton
ANIMATION_SPEED = 0.005

# ========= Text Animation ========= #
def text_animation():
    banner_text = f"""{MAGENTA}
  _  _  _   _    __    ____  _  _  ____  ___  ____  ____  ____ {RED}
 ( \/ )( )_( )  /__\  (  _ \( \/ )( ___)/ __)(_  _)( ___)(  _ \{MAGENTA}
  )  (  ) _ (  /(__)\  )   / \  /  )__) \__ \  )(   )__)  )   /{RED}
 (_/\_)(_) (_)(__)(__)(_)\_)  \/  (____)(___/ (__) (____)(_)\_)
    {RESET}"""
    for char in banner_text:
        print(char, end='', flush=True)
        time.sleep(ANIMATION_SPEED)
    print(f"\n{CYAN} >>> Extended Reconnaissance & Exploitation Toolkit For Newbies <<<{RESET}")
    print(f"{GREEN}| GitHub:{RESET}{YELLOW} @n3tworkh4x |{RESET}{MAGENTA} Ko-fi{YELLOW}(Donation):{RESET}{GREEN} https://ko-fi.com/n3twork |")
    print(f"\t\t{WHITE}Created by{GREEN} Network({RED}G{YELLOW}H{GREEN}A{BLACK}N{RED}A)\t\t\t")
    print(f"{RED} Use only for authorized security testing!{RESET}")



# ========= Display Menu Function ========= #
def show_menu() -> None:
    text_animation()
    print(f"\n\t\t{LIGHTCYAN_EX} ︻芫═─── {RED}💥 {YELLOW}(▀̿Ĺ̯▀̿ ̿)\t\t\t\n")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━୨ৎ━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{GREEN}         {LIGHTCYAN_EX}🚀{GREEN}   XHARVESTER {YELLOW}-{CYAN} MAIN MENU   {LIGHTCYAN_EX}🕷{GREEN}")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━୨ৎ━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{CYAN}\t[{WHITE}1{CYAN}]{MAGENTA} ᛒ  {CYAN}BlueTooth")
    print(f"{CYAN}\t[{WHITE}2{CYAN}]{MAGENTA} 🌐 {CYAN}Wifi")
    print(f"{CYAN}\t[{WHITE}3{CYAN}]{MAGENTA} 🚖 {CYAN}Automobile")
    print(f"{CYAN}\t[{WHITE}4{CYAN}]{MAGENTA} 📡 {CYAN}Radio Frequency")
    print(f"{CYAN}\t[{WHITE}5{CYAN}]{MAGENTA} 🏙️  {CYAN}Industrial Control System - SCADA")
    print(f"{CYAN}\t[{WHITE}6{CYAN}]{MAGENTA} 🛈  {CYAN}About")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━୨ৎ━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{CYAN}\t [{RED}0{CYAN}]{RED} ✗ Exit")
    print(f"{CYAN}\t[{YELLOW}99{CYAN}]{YELLOW} 🎁 Update XHARVESTER")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━୨ৎ━━━━━━━━━━━━━━━━━━━━━━━━━⇉")



# ========= DISPLAY THE FUNCTION FOR TOOL, PROGRAMMER BIO, & PROGRAMMER TAGLINES ========= #
def about() -> None:
    description = f"""
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{WHITE}Bio: {RESET}
{MAGENTA}     I am a 19-year-old skilled hacker and programmer with expertise in ICS/SCADA security,
{MAGENTA}     Wireless exploitation (Wi-Fi/Bluetooth/RF) & Automotive systems hacking.
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{WHITE}Tag Lines: {RESET}
{LIGHTCYAN_EX}    * {MAGENTA}Coding Is My Weapon, Hacking Is My Art
{LIGHTCYAN_EX}    * {MAGENTA}I Craft Backdoors & Close Loopholes
{LIGHTCYAN_EX}    * {MAGENTA}I Hack To Protect, Not To Destroy
{LIGHTCYAN_EX}    * {MAGENTA}I Love Crafting Backdoors{CYAN} 🚪
{LIGHTCYAN_EX}    * {MAGENTA}Breaking Systems, Building Knowledge  
{LIGHTCYAN_EX}    * {MAGENTA}Pseudo Code: Print 'Our Democracy Has Been Hacked'
{LIGHTCYAN_EX}    * {MAGENTA}Plant Backdoors, Gain Power
{LIGHTCYAN_EX}    * {MAGENTA}When We Lose Our Principles, We Invite Chaos
{LIGHTCYAN_EX}    * {MAGENTA}The Quieter You Become, The More You Are Able To Hear
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{WHITE}About: {RESET}
{MAGENTA}      xharvester is a specialized,{RESET}
{MAGENTA}      modular Python-based reconnaissance and exploitation suite designed for security assessments of radio frequency (RF),{RESET}
{MAGENTA}      wireless (bluetooth & wifi), industrial control system (SCADA), and automotive systems.{RESET}
{MAGENTA}      It integrates multiple tools and scripts into a unified workflow for probing,{RESET}
{MAGENTA}      analyzing, and documenting findings from the physical and wireless world.{RESET}
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{WHITE}Version: {RESET}{MAGENTA}1.0{RESET}
{WHITE}Date: {RESET}{MAGENTA}{datetime.now().strftime(f"%d/%m/%Y {WHITE}Time:{RESET}{MAGENTA} %H:%M")}
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
"""
    print(description)


# ========= The Clear Function For The Program ========= #
def clear_screen() -> None:
    '''Clear The Terminal/CMD'''
    os.system('cls' if os.name == 'nt' else 'clear')



# ========= Get Hostname Function ========= #
def get_hostname() -> str:
    '''Gets The Hostname Of The User'''
    try:
        return socket.gethostname()
    except:
        return "unknown"
    
    

# ========= Option For The About Function ========= #
def info() -> None:
    try:
        time_choice = input(f'{CYAN}  [{GREEN}❔{CYAN}]{GREEN} Choose the timestamp [{CYAN}Read Bio{GREEN} & {CYAN}About{GREEN}][{RED}default {GREEN}={YELLOW} 10{GREEN}]>>> {YELLOW}')
        if not time_choice:
            about()
            time.sleep(10)
        else:
            about()
            time.sleep(int(time_choice))
    except ValueError:
        mesg = f"{RED}\t\t\t Invalid input. Using default time of 10 seconds.\t\t\t"
        for char in mesg:
            print(char, end="", flush=True)
            time.sleep(0.05)
    except (KeyboardInterrupt, EOFError):
        mesg = f"\n\t\t\t{MAGENTA}🚪🔙{YELLOW} Returning to menu...\t\t\t"
        for char in mesg:
            print(char, end="", flush=True)
            time.sleep(0.05)

        

# ========= Main Loop For Xharvester ========== #
def main():
    ''' Check for root privileges '''
    if not os.geteuid() == 0:
        warning = f"{YELLOW} Please run xharvester with administrator/root privileges!\n"
        for char in warning:
            print(char, end='', flush=True)
            time.sleep(0.05)
        sys.exit(1)
    
    active = True
    while active:
        try:
            clear_screen()
            show_menu()
            choice = input(f"\n  {CYAN}[{MAGENTA}💀{CYAN}] {GREEN}xharvester{YELLOW}@{RESET}{CYAN}{get_hostname()}{RESET}{RED}:{RESET}{GREEN}~{RESET}{YELLOW}$ ")
            
            if choice == "0":
                closing_text = f"\n\t\t\t{CYAN} [{MAGENTA}💀{CYAN}]{RED} Closing The Program...\t\t\t\n\n"
                for char in closing_text:
                    print(char, end='', flush=True)
                    time.sleep(0.05)
                active = False

            elif choice == "1":
                notdone = f"\t\t\t{RED}Not implemented yet!\a"
                for char in notdone:
                    print(char, end="", flush=True)
                    time.sleep(0.05)

            elif choice == "2":
                notdone = f"\t\t\t{RED}Not implemented yet!\a"
                for char in notdone:
                    print(char, end="", flush=True)
                    time.sleep(0.05)

            elif choice == "3":
                auto = AutomobileModule()
                auto.main()

            elif choice == '4':
                notdone = f"\t\t\t{RED}Not implemented yet!\a"
                for char in notdone:
                    print(char, end="", flush=True)
                    time.sleep(0.05)

            elif choice == '5':
                notdone = f"\t\t\t{RED}Not implemented yet!\a"
                for char in notdone:
                    print(char, end="", flush=True)
                    time.sleep(0.05)

            elif choice == '6':
                info()

            elif choice == '99':
                notdone = f"\t\t\t{RED}Not implemented yet!\a"
                for char in notdone:
                    print(char, end="", flush=True)
                    time.sleep(0.05)

            else:
                warning = f"\n\n\t\t\t{choice} is not a valid menu option!\n"
                print(warning)
                time.sleep(3)

        except (KeyboardInterrupt, EOFError):
            terminator = f"\n\n\t\t{CYAN}[{MAGENTA}💀{CYAN}]{RED} Forcefully Terminated By User...\t\t\t\n\n"
            for char in terminator:
                print(char, end="", flush=True)
                time.sleep(0.05)
            active = False

if __name__ == '__main__':
    try:
        main()
    except Exception:
        pass    