#!/usr/bin/env python3
import os
import time
import socket
import sys
import platform
import subprocess
from datetime import datetime
from pathlib import Path
from modules.bluetooth_module import BluetoothModule

# Color codes
GREEN = '\033[32m'
YELLOW = '\033[33m'
RED = '\033[31m'
BLUE = '\033[34m'
MAGENTA = '\033[35m'
CYAN = '\033[36m'
LIGHTCYAN_EX = '\033[96m'
BLACK = '\x1b[30m'
RESET = '\033[0m'

# Speed Conf
ANIMATION_SPEED = 0.005

### Color Status ###
def print_status(message: str) -> None:
    """Print status messages"""
    print(f"{GREEN}[+]{RESET} {message}")

def print_warning(message: str) -> None:
    """Print warning messages"""
    print(f"{YELLOW}[!]{RESET} {message}")

def print_error(message: str) -> None:
    """Print error messages"""
    print(f"{RED}[-]{RESET} {message}")

### Text Animation ###
def text_animation():
    banner_text = f"""{MAGENTA}
 _  _  _   _    __    ____  _  _  ____  ___  ____  ____  ____ {RED}
( \/ )( )_( )  /__\  (  _ \( \/ )( ___)/ __)(_  _)( ___)(  _ \\{MAGENTA}
 )  (  ) _ (  /(__)\  )   / \  /  )__) \__ \  )(   )__)  )   /{RED}
(_/\_)(_) (_)(__)(__)(_)\_)  \/  (____)(___/ (__) (____)(_)\_)
    {RESET}"""
    for char in banner_text:
        print(char, end='', flush=True)
        time.sleep(ANIMATION_SPEED)
    print(f"\n{CYAN}>>> Extended Reconnaissance Toolkit For Pentesters <<<{RESET}")
    print(f"{GREEN}| GitHub:{RESET}{YELLOW} @n3tworkh4x |{RESET}{MAGENTA} Ko-fi{YELLOW}(Donation):{RESET}{GREEN} https://ko-fi.com/n3twork |")
    print(f"\t\t\t{RED}DEVELOPED{YELLOW} BY{GREEN} N3TWORK({RED}G{YELLOW}H{GREEN}A{BLACK}N{RED}A)\t\t\t")
    print(f"{RED} Use only for authorized security testing!{RESET}")

### Display Menu ###
def show_menu() -> None:
    text_animation()
    print(f"\n\t\t\t(▀̿Ĺ̯▀̿ ̿)\t\t\t\n")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{GREEN}         🚀   XHARVESTER -- MAIN MENU")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{CYAN}\t[1] 🔀 BlueTooth")
    print(f"{CYAN}\t[2] 📶 Wifi")
    print(f"{CYAN}\t[3] 🚖 Automobile")
    print(f"{CYAN}\t[4] 📡 Radio Frequency")
    print(f"{CYAN}\t[5] 🏙️  Industrial Control System - SCADA")
    print(f"{CYAN}\t[6] 🤘 About")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{RED}\t [0] ❌ Exit")
    print(f"{YELLOW}\t[99] 🎁 Update XHARVESTER")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")  

### Display About ###
def about() -> None:
    description = f"""
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{YELLOW}Bio: {RESET}{GREEN}I am a 19-year-old skilled hacker and programmer with expertise in ICS/SCADA security,
{GREEN}Wireless exploitation (Wi-Fi/Bluetooth/RF) & Automotive systems hacking.
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{YELLOW}About: {RESET}{CYAN}xharvester is a specialized,{RESET}
{CYAN}modular Python-based reconnaissance suite designed for security assessments of radio frequency (RF),{RESET}
{CYAN}wireless (bluetooth & wifi),{RESET}
{CYAN}industrial control system (SCADA),{RESET}
{CYAN}and automotive systems.{RESET}
{CYAN}It integrates multiple tools and scripts into a unified workflow for probing,{RESET}
{CYAN}analyzing, and documenting findings from the physical and wireless world.{RESET}
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{YELLOW}Version: {RESET}{BLUE}1.0{RESET}
{YELLOW}Date: {RESET}{BLUE}{datetime.now().strftime(f"%d/%m/%Y {YELLOW}Time:{RESET}{BLUE} %H:%M")}
{RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
"""
    print(description)

def clear_screen() -> None:
    os.system('cls' if os.name == 'nt' else 'clear')

def get_hostname() -> str:
    try:
        return socket.gethostname()
    except:
        return "unknown"

### Check for root privileges ###
def check_root() -> bool:
    """Check if the script is running with root privileges"""
    if platform.system() == "Windows":
        # On Windows, we need to check for administrator privileges
        try:
            import ctypes
            return ctypes.windll.shell32.IsUserAnAdmin() != 0
        except:
            return False
    else:
        # On Unix-like systems, check for root UID
        return os.geteuid() == 0

### Check if desktop launcher exists ###
def check_desktop_launcher() -> bool:
    """Check if desktop launcher exists and is accessible"""
    system = platform.system().lower()
    
    if system == "windows":
        # Check for Windows shortcut
        desktop = Path.home() / "Desktop" / "XHarvester.lnk"
        if desktop.exists():
            return True
        
        # Check other possible locations
        possible_locations = [
            Path.home() / "OneDrive" / "Desktop" / "XHarvester.lnk",
            Path(os.environ.get('USERPROFILE', '')) / "Desktop" / "XHarvester.lnk"
        ]
        
        for location in possible_locations:
            if location.exists():
                return True
                
    else:
        # Check for Linux desktop launcher
        desktop_file = Path.home() / ".local" / "share" / "applications" / "xharvester.desktop"
        if desktop_file.exists():
            return True
    return False

### Fix desktop launcher permissions ###
def fix_desktop_launcher():
    """Fix desktop launcher permissions and accessibility"""
    system = platform.system().lower()
    
    if system != "windows":
        # For Linux systems, ensure the desktop file is executable
        desktop_file = Path.home() / ".local" / "share" / "applications" / "xharvester.desktop"
        if desktop_file.exists():
            try:
                desktop_file.chmod(desktop_file.stat().st_mode | 0o755)
                print_status("Fixed desktop launcher permissions")
                return True
            except Exception as e:
                print_error(f"Failed to fix desktop launcher permissions: {e}")
                return False
    return False

def run_updater():
    clear_screen()
    # Check if updater script exists
    updater_script = "xharvester_updater.py"
    if not os.path.exists(updater_script):
        print_error(f"Updater script '{updater_script}' not found!")
        print_warning("Please ensure xharvester_updater.py is in the same directory.")
        input(f"\n{GREEN}Press Enter to continue...{RESET}")
        return
    
    try:
        # Run the updater script
        print(f"{CYAN}Running XHarvester updater...{RESET}\n")
        result = subprocess.run([sys.executable, updater_script], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print_status("Update completed successfully!")
            time.sleep(ANIMATION_SPEED)
        else:
            print_error("Update failed or was canceled.")
            time.sleep(ANIMATION_SPEED)
            
    except KeyboardInterrupt:
        print_error("Update canceled by user.")
    except Exception as e:
        print_error(f"Error running updater: {e}")
    
    input(f"\n{GREEN}Press Enter to continue...")

def info() -> str:
    try:
        time_choice = input(f'{GREEN}[?] Choose time stamps [Read Bio & About][default = 10]>>> ')
        if not time_choice:
            about()
            time.sleep(10)
        else:
            about()
            time.sleep(int(time_choice))
    except ValueError:
        print_error("Invalid input. Using default time of 10 seconds.")
        time.sleep(10)
    except (KeyboardInterrupt, EOFError):
        print(f"\n\t\t\t{YELLOW}[⇇] Returning to menu...")
        time.sleep(2)

def main():
    # Check for root privileges
    if not check_root():
        warning = f"{YELLOW}[!] {RESET}{YELLOW}Please run xharvester with administrator/root privileges!\n"
        for word in warning:
            print(word, end='', flush=True)
            time.sleep(0.05)
        
        # Offer to fix desktop launcher if it exists but isn't working
        if check_desktop_launcher():
            response = input(f"\n{GREEN}Would you like to try fixing the desktop launcher? (Y/n): {RESET}")
            if response.lower() not in ['n', 'no']:
                if fix_desktop_launcher():
                    print_status("Desktop launcher fixed. Please try clicking it again.")
                else:
                    print_error("Failed to fix desktop launcher.")
        sys.exit(1)
    
    # ========== MAIN LOOP ========== #
    active = True
    while active:
        clear_screen()
        show_menu()
        try:
            choice = input(f"\n  {GREEN}xharvester{YELLOW}@{RESET}{CYAN}{get_hostname()}{RESET}{RED}:{RESET}{GREEN}~{RESET}{YELLOW}$ ")
        except (KeyboardInterrupt, EOFError):
            terminator = f"\n\n\t\t\t{MAGENTA}[💀]{RESET}{RED} Exiting...\n\n"
            for word in terminator:
                print(word, end="", flush=True)
                time.sleep(0.05)
            break
            
        if choice == "0":
            closing_text = f"\n\t\t\t{MAGENTA}[💀] {RESET}{RED}Closing The Program...\n\n"
            for word in closing_text:
                print(word, end='', flush=True)
                time.sleep(0.05)
            active = False
            
        elif choice == "1":
            blue = BluetoothModule()
            blue.main()

        elif choice == "2":
            print(f"\n\t\t\t{RED}[!]{YELLOW} Still Under Development!\n")
            time.sleep(2)

        elif choice == "3":
            print(f"\n\t\t\t{RED}[!]{YELLOW} Still Under Development!\n")
            time.sleep(2)

        elif choice == '4':
            print(f"\n\t\t\t{RED}[!]{YELLOW} Still Under Development!\n")
            time.sleep(2)

        elif choice == '5':
            print(f"\n\t\t\t{RED}[!]{YELLOW} Still Under Development!\n")
            time.sleep(2)

        elif choice == '6':
            info()

        elif choice == '99':
            run_updater()

        else:
            warning = f"\n\t\t\t{choice} is not a valid menu option!\n"
            print(warning)
            time.sleep(2)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt as err:
        varerr = f"\n\n\t\t\t{MAGENTA}{err}[💀] {RESET}{RED}Process Terminated by User\n\n"
        for word in varerr:
            print(word, end="", flush=True)
            time.sleep(0.05)