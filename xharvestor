#!/bin/env python3
import argparse
import subprocess
import os
from typing import List, Dict, Any

# Color setup
try:
    import colorama
    colorama.init(autoreset=True)
    GREEN = colorama.Fore.GREEN
    YELLOW = colorama.Fore.YELLOW
    RED = colorama.Fore.RED
    BLUE = colorama.Fore.BLUE
    MAGENTA = colorama.Fore.MAGENTA
    CYAN = colorama.Fore.CYAN
    RESET = colorama.Fore.RESET
except ImportError:
    # Fallback if colorama is not installed
    GREEN = YELLOW = RED = BLUE = MAGENTA = CYAN = RESET = ""

#Banner Function
def banner() -> None:
    """Banner"""
    os.system('clear')
    print(f"""{MAGENTA}
 _  _  _   _    __    ____  _  _  ____  ___  ____  _____  ____ 
( \/ )( )_( )  /__\  (  _ \( \/ )( ___)/ __)(_  _)(  _  )(  _ \\
 )  (  ) _ (  /(__)\  )   / \  /  )__) \__ \  )(   )(_)(  )   /
(_/\_)(_) (_)(__)(__)(_)\_)  \/  (____)(___/ (__) (_____)(_)\_)
    {RESET}""")
    print(f"{CYAN}>>> Extented Reconnaissance Toolkit For Pentesters <<<{RESET}")
    print(f"{GREEN}| GitHub:{RESET}{YELLOW} @n3towrkh4x |{RESET}")
    print(f"{RED}Use only for authorized security testing!{RESET}\n")

#Color status  
def print_status(message: str) -> None:
    """Print status messages"""
    print(f"{GREEN}[+]{RESET} {message}")

def print_warning(message: str) -> None:
    """Print warning messages"""
    print(f"{YELLOW}[!]{RESET} {message}")

def print_error(message: str) -> None:
    """Print error messages"""
    print(f"{RED}[-]{RESET} {message}")

class WiFiModule:
    """WiFi reconnaissance module"""
    def __init__(self, interface: str) -> None:
        self.interface = interface
        self.monitor_interface = f"{interface}mon"
        self.scan_results = []
    
    def setup_monitor_mode(self) -> str:
        """Put wireless interface into monitor mode"""
        print_status(f"{YELLOW}Setting up monitor mode on {self.interface}{RESET}") 
        cmd = f"sudo ifconfig {self.interface} down && sudo iwconfig {self.interface} mode monitor && sudo ifconfig {self.interface} up && sudo airmon-ng check kill"
        output = subprocess.check_output(cmd, shell=True, text=True)
        if output:
            print(f'{GREEN}Successfully set to monitor mode: {self.interface}!{RESET}')
        elif not output:
            print('An error occured during change of mode!')
    
    def setup_manage_mode(self) -> str:
        """Put wireless interface into manage mode"""
        print_status(f"{YELLOW}Setting up manage mode on {self.interface}{RESET}")
        cmd = f"sudo ifconfig {self.interface} down && sudo iwconfig {self.interface} mode manage && sudo ifconfig {self.interface} up && sudo service NetworkManager restart"
        subprocess.check_output(cmd, shell=True, text=True)
        print_status(f'{GREEN}Successfully set to manage mode: {self.interface}!{RESET}')

def main():
    """All modules and argparse"""
    parser = argparse.ArgumentParser(
        prog='xharvestor',
        description=f'{CYAN}xharvestor is a specialized,{RESET}' \
        f' {CYAN}modular Python-based reconnaissance suite designed for security assessments of radio frequency (RF),{RESET}' \
        f' {CYAN}wireless(bluetooth & wifi),{RESET}' \
        f' {CYAN}industrial control system(scada),{RESET}'
        f' {CYAN}and automotive systems.{RESET}' \
        f' {CYAN}It integrates multiple tools and scripts into a unified workflow for probing,{RESET}' \
        f' {CYAN}analyzing, and documenting findings from the physical and wireless world.{RESET}'
    )
    parser.add_argument('--wifi', help=f'{GREEN}wifi module mode{YELLOW}(wifi){RESET}')
    parser.add_argument('-bt', '--bluetooth', help=f'{GREEN}bluetooth module mode{YELLOW}(bluetooth){RESET}')
    parser.add_argument('-rf', '--radio-frequency', help=f'{GREEN}radio frequency mode{YELLOW}(rf){RESET}')
    parser.add_argument('-ics', '--industrial-control-system', help=f'{GREEN}industrial control system[scada] module mode{YELLOW}(ics){RESET}')
    parser.add_argument('-auto', '--automobile', help=f'{GREEN}automobile module mode{YELLOW}(automobile){RESET}')

    args = parser.parse_args()
    if not args:
        parser.print_help()
    elif args.wifi == 'wifi':
        wifi = WiFiModule('wlo1')
        banner()
        #wifi.setup_monitor_mode()    
        wifi.setup_manage_mode()

if __name__ == '__main__':
   main()