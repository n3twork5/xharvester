#!/bin/env python3
import subprocess
import os
import argparse
import time
import socket
import sys

### Color Setup ###
try:
    import colorama
    colorama.init(autoreset=True)
    GREEN = colorama.Fore.GREEN
    YELLOW = colorama.Fore.YELLOW
    RED = colorama.Fore.RED
    BLUE = colorama.Fore.BLUE
    MAGENTA = colorama.Fore.MAGENTA
    CYAN = colorama.Fore.CYAN
    LIGHTCYAN_EX = colorama.Fore.LIGHTCYAN_EX
    RESET = colorama.Fore.RESET
except ImportError:
    # Fallback if colorama is not installed
    GREEN = YELLOW = RED = BLUE = MAGENTA = CYAN = LIGHTCYAN_EX = RESET = ""

### Color Status ###
def print_status(message: str) -> None:
    """Print status messages"""
    print(f"{GREEN}[+]{RESET} {message}")

def print_warning(message: str) -> None:
    """Print warning messages"""
    print(f"{YELLOW}[!]{RESET} {message}")

def print_error(message: str) -> None:
    """Print error messages"""
    print(f"{RED}[-]{RESET} {message}")


### Banner Function ###
def banner() -> None:
    """Banner"""
    os.system('cls' if os.name == 'nt' else 'clear')
    banner_text = """
 _  _  _   _    __    ____  _  _  ____  ___  ____  _____  ____ 
( \/ )( )_( )  /__\  (  _ \( \/ )( ___)/ __)(_  _)(  _  )(  _ \\
 )  (  ) _ (  /(__)\  )   / \  /  )__) \__ \  )(   )(_)(  )   /
(_/\_)(_) (_)(__)(__)(_)\_)  \/  (____)(___/ (__) (_____)(_)\_)
    """
    print(banner_text)

### Text Animation ###
def text_animation():
    banner_text = """
 _  _  _   _    __    ____  _  _  ____  ___  ____  _____  ____ 
( \/ )( )_( )  /__\  (  _ \( \/ )( ___)/ __)(_  _)(  _  )(  _ \\
 )  (  ) _ (  /(__)\  )   / \  /  )__) \__ \  )(   )(_)(  )   /
(_/\_)(_) (_)(__)(__)(_)\_)  \/  (____)(___/ (__) (_____)(_)\_)
    """
    for char in banner_text:
        print(char, end='', flush=True)
        time.sleep(0.005)
    print(f"\n{CYAN}>>> Extended Reconnaissance Toolkit For Pentesters <<<{RESET}")
    print(f"{GREEN}| GitHub:{RESET}{YELLOW} @n3towrkh4x |{RESET}")
    print(f"{RED}Use only for authorized security testing!{RESET}")

### Display Menu ###
def show_menu() -> None:
    text_animation()
    print(f"\n\t\t\t(▀̿Ĺ̯▀̿ ̿)\t\t\t\n")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{GREEN}         🚀   XHARVESTOR -- MAIN MENU")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{CYAN}\t[1] 🔀 BlueTooth")
    print(f"{CYAN}\t[2] 📶 Wifi")
    print(f"{CYAN}\t[3] 🚖 Automobile")
    print(f"{CYAN}\t[4] 📡 Radio Frequency")
    print(f"{CYAN}\t[5] 🏙️  Industrial Control System - SCADA")
    print(f"{CYAN}\t[6] 🤘 About")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")
    print(f"{RED}\t [0] ❌ Exit")
    print(f"{YELLOW}\t[99] 🎁 Update XHARVESTOR")
    print(f"{LIGHTCYAN_EX}  ⇇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━⇉")  

### Display About ###
def about() -> None:
    description = f"""
{RED}\t\t\t━━━━━━━━━━\t\t\t
{YELLOW}Bio: {RESET}{GREEN}I am a 19-year-old skilled hacker and programmer with expertise in ICS/SCADA security,
{GREEN}Wireless exploitation (Wi-Fi/Bluetooth/RF) & Automotive systems hacking.
{RED}\t\t\t━━━━━━━━━━\t\t\t
{YELLOW} About: {RESET}{CYAN}xharvestor is a specialized,{RESET}
{CYAN}modular Python-based reconnaissance suite designed for security assessments of radio frequency (RF),{RESET}
{CYAN}wireless (bluetooth & wifi),{RESET}
{CYAN}industrial control system (SCADA),{RESET}
{CYAN}and automotive systems.{RESET}
{CYAN}It integrates multiple tools and scripts into a unified workflow for probing,{RESET}
{CYAN}analyzing, and documenting findings from the physical and wireless world.{RESET}
"""
    parser = argparse.ArgumentParser(description=description)
    parser.print_help()


### Main Program ###
def main():
    # ========== MAIN LOOP ========== #
    active = True
    while active:
        show_menu()
        choice = input(f"\n{GREEN}root@{socket.gethostname()}:~$ ")
        if choice == "0":
            killer = "\n[💀] Closing The Program...\n"
            for word in killer:
                print(word, end='', flush=True)
                time.sleep(0.05)  
            active = False
            
        elif choice == "1":
            print(f"\n--- BlueTooth ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)
            
        elif choice == "2":
            print(f"\n--- WiFi ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)

        elif choice == "3":
            print(f"\n--- Automobile ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)

        elif choice == '4':
            print(f"\n--- Radio Frequency ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)

        elif choice == '5':
            print(f"\n--- Industrial Control System - SCADA ---\n")
            print(f"{RED}[!] This section is still under development...{RESET}")
            time.sleep(3)

        elif choice == '6':
            time_choice = input(f'{GREEN}[?] Choose time stamps [Read Bio & About][default = 10]>>> ')
            if not time_choice:
                about()
                time.sleep(10)
            else:
                try:
                    about()
                    time.sleep(int(time_choice))
                except ValueError:
                    print_error("Invalid input. Using default time of 10 seconds.")
                    time.sleep(10)

        elif choice == '99':
            print(f"\n{YELLOW}\t[🚀] Updating XHARVESTOR...{RESET}\n")
            time.sleep(3)
            print(f"{YELLOW}\t[🚀] Update & Upgrade Completion...")
            time.sleep(1)

        else:
            warning = f"\n\t{choice} is not in the menu!\n"
            for word in warning:
                print(word, end='', flush=True)
                time.sleep(0.15)    

if __name__ == '__main__':
    if os.name != 'nt' and os.geteuid() != 0:
        warning = "[!] Please run xharvestor as root\n"
        for word in warning:
            print(word, end='', flush=True)
            time.sleep(0.05)
        sys.exit(1)
    else:
        main()